---
const { types, schema } = Astro.props;

interface SchemaRow {
	prop: string;
	type: string;
	description?: string;
	required?: boolean;
}

function formatSchemaData(typeKey: string) {
	const { properties, propertyOrder, required } = schema.definitions[typeKey];
	let schemaArr: SchemaRow[] = [];
	// Sort Properties
	let propertiesSorted: any = {};
	if (propertyOrder) propertyOrder.forEach((p: string) => propertiesSorted[p] = properties[p]);
	// Generate Array of Props
	Object.entries(propertiesSorted).map((schemaRow: any) => {
		const [prop, values] = schemaRow;
		schemaArr.push({
			prop,
			type: values['$ref'] ? values['$ref'].replace('#/definitions/','') : values.type,
			description: values.description ?? '-',
			required: required && required.includes(prop) || false
		});
	});
	// Return the schema array
	return schemaArr;
}
---

<div class="space-y-8">
	{types.map((typeKey: string) => {
		return (
			<section class="space-y-4">
				{/* Label */}
				<h3 class="h3">{typeKey.replace('Props','')}</h3>
				{/* Table */}
				<div class="table-wrap">
					<table class="table caption-bottom">
						<thead>
							<tr>
								<th>Prop</th>
								<th>Type</th>
								<th>Description</th>
							</tr>
						</thead>
						<tbody class="hover:[&>tr]:preset-tonal-primary">
							{
								formatSchemaData(typeKey).map((cell: any) => (
									<tr>
										<td>
											<div class="flex items-center gap-1">
												<code class="code">{cell.prop}</code>
												{cell.required === true ? <span>*</span> : null}
											</div>
										</td>
										<td class="opacity-60 italic">{cell.type}</td>
										<td>{cell.description}</td>
									</tr>
								))
							}
						</tbody>
					</table>
				</div>
			</section>
		);
	})}
</div>