---
interface Props {
	types: string[];
	schema: {
		name: string;
		properties: {
			name: string;
			type: string;
			required: boolean;
			documentation: {
				text: string | null;
				tags: {
					name: string;
					value: string;
				}[];
			};
		}[];
	}[];
}

const { types, schema } = Astro.props;

const interfaces = schema.filter((schema) => types.includes(schema.name));
---

<div class="space-y-8">
	{
		interfaces.map((i) => {
			return (
				<section class="space-y-4">
					{/* Label */}
					<h3 class="h3">{i.name.replace('Props', '')}</h3>
					{/* Table */}
					<div class="table-wrap">
						<table class="table caption-bottom">
							<thead>
								<tr>
									<th>Property</th>
									<th>Type</th>
									<th>Description</th>
								</tr>
							</thead>
							<tbody class="hover:[&>tr]:bg-surface-500/5">
								{i.properties.map((property) => (
									<tr class="align-top">
										{/* Property */}
										<td>
											<div class="flex items-center gap-1">
												<code class="code">{property.name}</code>
												{property.required ? <span>*</span> : null}
											</div>
										</td>
										{/* Type */}
										<td class="italic opacity-60">{property.type}</td>
										{/* Description */}
										<td>
											<div class="grid grid-cols-1 gap-2">
												<article>{property.documentation.text}</article>
												{property.documentation.tags.some((tag) => tag.name === 'default') ? (
													<small class="italic opacity-60">
														Default: {property.documentation.tags.find((tag) => tag.name === 'default')!.value}
													</small>
												) : null}
											</div>
										</td>
									</tr>
								))}
							</tbody>
						</table>
					</div>
				</section>
			);
		})
	}
</div>
