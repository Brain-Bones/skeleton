{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"definitions": {
		"IntlTranslations": {
			"properties": {
				"clearTriggerLabel": {
					"type": "string"
				},
				"noTagsSelected": {
					"type": "string"
				}
			},
			"propertyOrder": [
				"clearTriggerLabel",
				"deleteTagTriggerLabel",
				"tagSelected",
				"tagAdded",
				"tagsPasted",
				"tagEdited",
				"tagUpdated",
				"tagDeleted",
				"noTagsSelected",
				"inputLabel"
			],
			"required": ["clearTriggerLabel"],
			"type": "object"
		},
		"Iterable<React.ReactNode>": {
			"propertyOrder": ["__@iterator@83"],
			"type": "object"
		},
		"Partial<{root:string;input:string;hiddenInput:string;clearBtn:string;label:string;control:string;item(opts:ItemProps):string;itemDeleteTrigger(opts:ItemProps):string;itemInput(opts:ItemProps):string;}>": {
			"properties": {
				"clearBtn": {
					"type": "string"
				},
				"control": {
					"type": "string"
				},
				"hiddenInput": {
					"type": "string"
				},
				"input": {
					"type": "string"
				},
				"item": {
					"propertyOrder": [],
					"type": "object"
				},
				"itemDeleteTrigger": {
					"propertyOrder": [],
					"type": "object"
				},
				"itemInput": {
					"propertyOrder": [],
					"type": "object"
				},
				"label": {
					"type": "string"
				},
				"root": {
					"type": "string"
				}
			},
			"propertyOrder": ["root", "input", "hiddenInput", "clearBtn", "label", "control", "item", "itemDeleteTrigger", "itemInput"],
			"type": "object"
		},
		"React.ReactElement<any,string|React.JSXElementConstructor<any>>": {
			"description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
			"properties": {
				"key": {
					"type": "string"
				},
				"props": {
					"description": "The type of the props object"
				},
				"type": {
					"anyOf": [
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"type": "string"
						}
					],
					"description": "The type of the component or tag"
				}
			},
			"propertyOrder": ["type", "props", "key"],
			"required": ["key", "props", "type"],
			"type": "object"
		},
		"React.ReactNode": {
			"anyOf": [
				{
					"$ref": "#/definitions/React.ReactElement<any,string|React.JSXElementConstructor<any>>"
				},
				{
					"$ref": "#/definitions/Iterable<React.ReactNode>"
				},
				{
					"$ref": "#/definitions/React.ReactPortal"
				},
				{
					"type": ["string", "number", "boolean"]
				}
			],
			"description": "Represents all of the things React can render.\n\nWhere {@link ReactElement} only represents JSX, `ReactNode` represents everything that can be rendered."
		},
		"React.ReactPortal": {
			"properties": {
				"children": {
					"$ref": "#/definitions/React.ReactNode"
				},
				"key": {
					"type": "string"
				},
				"props": {
					"description": "The type of the props object"
				},
				"type": {
					"anyOf": [
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"type": "string"
						}
					],
					"description": "The type of the component or tag"
				}
			},
			"propertyOrder": ["children", "type", "props", "key"],
			"required": ["children", "key", "props", "type"],
			"type": "object"
		},
		"RegExp": {
			"properties": {
				"dotAll": {
					"type": "boolean"
				},
				"flags": {
					"type": "string"
				},
				"global": {
					"type": "boolean"
				},
				"ignoreCase": {
					"type": "boolean"
				},
				"lastIndex": {
					"type": "number"
				},
				"multiline": {
					"type": "boolean"
				},
				"source": {
					"type": "string"
				},
				"sticky": {
					"type": "boolean"
				},
				"unicode": {
					"type": "boolean"
				}
			},
			"propertyOrder": [
				"exec",
				"test",
				"source",
				"global",
				"ignoreCase",
				"multiline",
				"lastIndex",
				"compile",
				"flags",
				"sticky",
				"unicode",
				"dotAll",
				"__@match@447",
				"__@replace@449",
				"__@search@452",
				"__@split@454",
				"__@matchAll@456"
			],
			"required": ["dotAll", "flags", "global", "ignoreCase", "lastIndex", "multiline", "source", "sticky", "unicode"],
			"type": "object"
		},
		"TagsInputProps": {
			"properties": {
				"addOnPaste": {
					"default": false,
					"description": "Whether to add a tag when you paste values into the tag input",
					"type": "boolean"
				},
				"allowOverflow": {
					"description": "Whether to allow tags to exceed max. In this case,\nwe'll attach `data-invalid` to the root",
					"type": "boolean"
				},
				"autoFocus": {
					"description": "Whether the input should be auto-focused",
					"type": "boolean"
				},
				"base": {
					"description": "Set base classes for the root.",
					"type": "string"
				},
				"blurBehavior": {
					"description": "The behavior of the tags input when the input is blurred\n- `\"add\"`: add the input value as a new tag\n- `\"clear\"`: clear the input value",
					"enum": ["add", "clear"],
					"type": "string"
				},
				"buttonDelete": {
					"$ref": "#/definitions/React.ReactNode",
					"description": "The delete button label snippet."
				},
				"buttonDeleteBase": {
					"description": "Set base classes for the delete button.",
					"type": "string"
				},
				"buttonDeleteClasses": {
					"description": "Provide arbitrary classes to the delete button.",
					"type": "string"
				},
				"classes": {
					"description": "Provide arbitrary classes to the root.",
					"type": "string"
				},
				"delimiter": {
					"anyOf": [
						{
							"$ref": "#/definitions/RegExp"
						},
						{
							"type": "string"
						}
					],
					"default": ",",
					"description": "The character that serves has:\n- event key to trigger the addition of a new tag\n- character used to split tags when pasting into the input"
				},
				"dir": {
					"default": "ltr",
					"description": "The document's text/writing direction.",
					"enum": ["ltr", "rtl"],
					"type": "string"
				},
				"disabled": {
					"description": "Whether the tags input should be disabled",
					"type": "boolean"
				},
				"editable": {
					"default": true,
					"description": "Whether a tag can be edited after creation, by presing `Enter` or double clicking.",
					"type": "boolean"
				},
				"form": {
					"description": "The associate form of the underlying input element.",
					"type": "string"
				},
				"gap": {
					"description": "Set gap classes for the root.",
					"type": "string"
				},
				"getRootNode": {
					"description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron.",
					"propertyOrder": [],
					"type": "object"
				},
				"ids": {
					"$ref": "#/definitions/Partial<{root:string;input:string;hiddenInput:string;clearBtn:string;label:string;control:string;item(opts:ItemProps):string;itemDeleteTrigger(opts:ItemProps):string;itemInput(opts:ItemProps):string;}>",
					"description": "The ids of the elements in the tags input. Useful for composition."
				},
				"inputBase": {
					"description": "Set base classes for the add tag input.",
					"type": "string"
				},
				"inputClasses": {
					"description": "Provide arbitrary classes to the add tag input.",
					"type": "string"
				},
				"inputEditBase": {
					"description": "Set base classes for the edit tag input.",
					"type": "string"
				},
				"inputEditClasses": {
					"description": "Provide arbitrary classes to the edit tag input.",
					"type": "string"
				},
				"inputValue": {
					"description": "The tag input's value",
					"type": "string"
				},
				"invalid": {
					"description": "Whether the tags input is invalid",
					"type": "boolean"
				},
				"max": {
					"default": "Infinity",
					"description": "The max number of tags",
					"type": "number"
				},
				"maxLength": {
					"description": "The max length of the input.",
					"type": "number"
				},
				"name": {
					"description": "The name attribute for the input. Useful for form submissions",
					"type": "string"
				},
				"onFocusOutside": {
					"description": "Function called when the focus is moved outside the component",
					"propertyOrder": [],
					"type": "object"
				},
				"onHighlightChange": {
					"description": "Callback fired when a tag is highlighted by pointer or keyboard navigation",
					"propertyOrder": [],
					"type": "object"
				},
				"onInputValueChange": {
					"description": "Callback fired when the input value is updated",
					"propertyOrder": [],
					"type": "object"
				},
				"onInteractOutside": {
					"description": "Function called when an interaction happens outside the component",
					"propertyOrder": [],
					"type": "object"
				},
				"onPointerDownOutside": {
					"description": "Function called when the pointer is pressed down outside the component",
					"propertyOrder": [],
					"type": "object"
				},
				"onValueChange": {
					"description": "Triggers when the switch is toggled.",
					"propertyOrder": [],
					"type": "object"
				},
				"onValueInvalid": {
					"description": "Callback fired when the max tag count is reached or the `validateTag` function returns `false`",
					"propertyOrder": [],
					"type": "object"
				},
				"padding": {
					"description": "Set padding classes for the root.",
					"type": "string"
				},
				"placeholder": {
					"description": "Set the add tag input placeholder.",
					"type": "string"
				},
				"readOnly": {
					"description": "Whether the tags input should be read-only",
					"type": "boolean"
				},
				"required": {
					"description": "Whether the tags input is required",
					"type": "boolean"
				},
				"tagBackground": {
					"description": "Set background classes for each tag.",
					"type": "string"
				},
				"tagBase": {
					"description": "Set base classes for each tag.",
					"type": "string"
				},
				"tagClasses": {
					"description": "Provide arbitrary classes to each tag.",
					"type": "string"
				},
				"tagEditBackground": {
					"description": "Set background classes for the edit tag input.",
					"type": "string"
				},
				"tagListBase": {
					"description": "Set base classes for the tag list.",
					"type": "string"
				},
				"tagListClasses": {
					"description": "Provide arbitrary classes to the tag list.",
					"type": "string"
				},
				"translations": {
					"$ref": "#/definitions/IntlTranslations",
					"description": "Specifies the localized strings that identifies the accessibility elements and their states"
				},
				"validate": {
					"description": "Returns a boolean that determines whether a tag can be added.\nUseful for preventing duplicates or invalid tag values.",
					"propertyOrder": [],
					"type": "object"
				},
				"value": {
					"description": "The tag values",
					"items": {
						"type": "string"
					},
					"type": "array"
				}
			},
			"propertyOrder": [
				"placeholder",
				"base",
				"gap",
				"padding",
				"classes",
				"inputBase",
				"inputClasses",
				"tagListBase",
				"tagListClasses",
				"tagBase",
				"tagBackground",
				"tagClasses",
				"inputEditBase",
				"tagEditBackground",
				"inputEditClasses",
				"buttonDeleteBase",
				"buttonDeleteClasses",
				"buttonDelete",
				"onValueChange",
				"max",
				"required",
				"name",
				"value",
				"form",
				"dir",
				"invalid",
				"getRootNode",
				"disabled",
				"maxLength",
				"readOnly",
				"autoFocus",
				"ids",
				"translations",
				"delimiter",
				"editable",
				"inputValue",
				"onInputValueChange",
				"onHighlightChange",
				"onValueInvalid",
				"validate",
				"blurBehavior",
				"addOnPaste",
				"allowOverflow",
				"onPointerDownOutside",
				"onFocusOutside",
				"onInteractOutside"
			],
			"type": "object"
		}
	}
}
