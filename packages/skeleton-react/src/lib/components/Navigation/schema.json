{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"definitions": {
		"Iterable<React.ReactNode>": {
			"propertyOrder": ["__@iterator@83"],
			"type": "object"
		},
		"NavBarProps": {
			"properties": {
				"background": {
					"description": "Set background classes.",
					"type": "string"
				},
				"base": {
					"description": "Set base styles.",
					"type": "string"
				},
				"children": {
					"$ref": "#/definitions/React.ReactNode",
					"description": "The default children."
				},
				"classes": {
					"description": "Provide arbitrary CSS classes.",
					"type": "string"
				},
				"height": {
					"description": "Set width classes.",
					"type": "string"
				},
				"onChange": {
					"description": "Triggers when selection occurs.",
					"propertyOrder": [],
					"type": "object"
				},
				"padding": {
					"description": "Set padding classes.",
					"type": "string"
				},
				"tilesBase": {
					"description": "Set base classes.",
					"type": "string"
				},
				"tilesClasses": {
					"description": "Provide arbitrary CSS classes.",
					"type": "string"
				},
				"tilesFlexDirection": {
					"description": "Set flex direction classes.",
					"type": "string"
				},
				"tilesGap": {
					"description": "Set gap classes.",
					"type": "string"
				},
				"tilesItems": {
					"description": "Set flex align classes.",
					"type": "string"
				},
				"tilesJustify": {
					"description": "Set flex justify classes.",
					"type": "string"
				},
				"value": {
					"type": "string"
				},
				"width": {
					"description": "Set width classes.",
					"type": "string"
				},
				"widthExpanded": {
					"description": "Set width classes for expanded mode.",
					"type": "string"
				}
			},
			"propertyOrder": [
				"children",
				"value",
				"base",
				"background",
				"padding",
				"width",
				"widthExpanded",
				"height",
				"classes",
				"tilesBase",
				"tilesFlexDirection",
				"tilesJustify",
				"tilesItems",
				"tilesGap",
				"tilesClasses",
				"onChange"
			],
			"type": "object"
		},
		"NavCommonProps": {
			"description": "Props common between NavRail and NavBar",
			"properties": {
				"background": {
					"description": "Set background classes.",
					"type": "string"
				},
				"base": {
					"description": "Set base styles.",
					"type": "string"
				},
				"classes": {
					"description": "Provide arbitrary CSS classes.",
					"type": "string"
				},
				"height": {
					"description": "Set width classes.",
					"type": "string"
				},
				"onChange": {
					"description": "Triggers when selection occurs.",
					"propertyOrder": [],
					"type": "object"
				},
				"padding": {
					"description": "Set padding classes.",
					"type": "string"
				},
				"tilesBase": {
					"description": "Set base classes.",
					"type": "string"
				},
				"tilesClasses": {
					"description": "Provide arbitrary CSS classes.",
					"type": "string"
				},
				"tilesFlexDirection": {
					"description": "Set flex direction classes.",
					"type": "string"
				},
				"tilesGap": {
					"description": "Set gap classes.",
					"type": "string"
				},
				"tilesItems": {
					"description": "Set flex align classes.",
					"type": "string"
				},
				"tilesJustify": {
					"description": "Set flex justify classes.",
					"type": "string"
				},
				"value": {
					"type": "string"
				},
				"width": {
					"description": "Set width classes.",
					"type": "string"
				},
				"widthExpanded": {
					"description": "Set width classes for expanded mode.",
					"type": "string"
				}
			},
			"propertyOrder": [
				"value",
				"base",
				"background",
				"padding",
				"width",
				"widthExpanded",
				"height",
				"classes",
				"tilesBase",
				"tilesFlexDirection",
				"tilesJustify",
				"tilesItems",
				"tilesGap",
				"tilesClasses",
				"onChange"
			],
			"type": "object"
		},
		"NavContextState": {
			"properties": {
				"expanded": {
					"type": "boolean"
				},
				"onSelectionHandler": {
					"propertyOrder": [],
					"type": "object"
				},
				"parent": {
					"type": "string"
				},
				"value": {
					"type": "string"
				}
			},
			"propertyOrder": ["parent", "value", "expanded", "onSelectionHandler"],
			"required": ["onSelectionHandler", "parent", "value"],
			"type": "object"
		},
		"NavRailProps": {
			"properties": {
				"background": {
					"description": "Set background classes.",
					"type": "string"
				},
				"base": {
					"description": "Set base styles.",
					"type": "string"
				},
				"children": {
					"$ref": "#/definitions/React.ReactNode",
					"description": "The tiles child node."
				},
				"classes": {
					"description": "Provide arbitrary CSS classes.",
					"type": "string"
				},
				"expanded": {
					"description": "Enabled expanded mode.",
					"type": "boolean"
				},
				"footer": {
					"$ref": "#/definitions/React.ReactNode",
					"description": "The footer child node."
				},
				"footerBase": {
					"description": "Set base classes.",
					"type": "string"
				},
				"footerClasses": {
					"description": "Provide arbitrary CSS classes.",
					"type": "string"
				},
				"footerFlexDirection": {
					"description": "Set flex direction classes.",
					"type": "string"
				},
				"footerGap": {
					"description": "Set gap classes.",
					"type": "string"
				},
				"footerItems": {
					"description": "Set flex align classes.",
					"type": "string"
				},
				"footerJustify": {
					"description": "Set flex justify classes.",
					"type": "string"
				},
				"header": {
					"$ref": "#/definitions/React.ReactNode",
					"description": "The header child node."
				},
				"headerBase": {
					"description": "Set base classes.",
					"type": "string"
				},
				"headerClasses": {
					"description": "Provide arbitrary CSS classes.",
					"type": "string"
				},
				"headerFlexDirection": {
					"description": "Set flex direction classes.",
					"type": "string"
				},
				"headerGap": {
					"description": "Set gap classes.",
					"type": "string"
				},
				"headerItems": {
					"description": "Set flex align classes.",
					"type": "string"
				},
				"headerJustify": {
					"description": "Set flex justify classes.",
					"type": "string"
				},
				"height": {
					"description": "Set width classes.",
					"type": "string"
				},
				"onChange": {
					"description": "Triggers when selection occurs.",
					"propertyOrder": [],
					"type": "object"
				},
				"padding": {
					"description": "Set padding classes.",
					"type": "string"
				},
				"tilesBase": {
					"description": "Set base classes.",
					"type": "string"
				},
				"tilesClasses": {
					"description": "Provide arbitrary CSS classes.",
					"type": "string"
				},
				"tilesFlexDirection": {
					"description": "Set flex direction classes.",
					"type": "string"
				},
				"tilesGap": {
					"description": "Set gap classes.",
					"type": "string"
				},
				"tilesItems": {
					"description": "Set flex align classes.",
					"type": "string"
				},
				"tilesJustify": {
					"description": "Set flex justify classes.",
					"type": "string"
				},
				"value": {
					"type": "string"
				},
				"width": {
					"description": "Set width classes.",
					"type": "string"
				},
				"widthExpanded": {
					"description": "Set width classes for expanded mode.",
					"type": "string"
				}
			},
			"propertyOrder": [
				"expanded",
				"headerBase",
				"headerFlexDirection",
				"headerJustify",
				"headerItems",
				"headerGap",
				"headerClasses",
				"footerBase",
				"footerFlexDirection",
				"footerJustify",
				"footerItems",
				"footerGap",
				"footerClasses",
				"header",
				"children",
				"footer",
				"value",
				"base",
				"background",
				"padding",
				"width",
				"widthExpanded",
				"height",
				"classes",
				"tilesBase",
				"tilesFlexDirection",
				"tilesJustify",
				"tilesItems",
				"tilesGap",
				"tilesClasses",
				"onChange"
			],
			"type": "object"
		},
		"NavTileProps": {
			"properties": {
				"active": {
					"description": "Set active classes.",
					"type": "string"
				},
				"aspect": {
					"description": "Set aspect ratio classes.",
					"type": "string"
				},
				"background": {
					"description": "Set background classes.",
					"type": "string"
				},
				"base": {
					"description": "Set base styles.",
					"type": "string"
				},
				"children": {
					"$ref": "#/definitions/React.ReactNode",
					"description": "The default children."
				},
				"classes": {
					"description": "Provide arbitrary CSS classes.",
					"type": "string"
				},
				"expandedClasses": {
					"description": "Provide arbitrary CSS classes for expanded mode.",
					"type": "string"
				},
				"expandedGap": {
					"description": "Set gap classes for expanded mode.",
					"type": "string"
				},
				"expandedPadding": {
					"description": "Set padding classes for expanded mode.",
					"type": "string"
				},
				"gap": {
					"description": "Set gap classes.",
					"type": "string"
				},
				"hover": {
					"description": "Set hover classes.",
					"type": "string"
				},
				"href": {
					"description": "Provide an href link; turns Tiles into an anchor",
					"type": "string"
				},
				"id": {
					"description": "Provide a unique ID.",
					"type": "string"
				},
				"label": {
					"description": "Provide the label text.",
					"type": "string"
				},
				"labelBase": {
					"description": "Set base classes.",
					"type": "string"
				},
				"labelClasses": {
					"description": "Provide arbitrary CSS classes.",
					"type": "string"
				},
				"labelExpanded": {
					"description": "Provide a longer label in expanded mode.",
					"type": "string"
				},
				"labelExpandedBase": {
					"description": "Set base classes.",
					"type": "string"
				},
				"labelExpandedClasses": {
					"description": "Provide arbitrary CSS classes.",
					"type": "string"
				},
				"onClick": {
					"description": "Triggers when the tile is clicked.",
					"propertyOrder": [],
					"type": "object"
				},
				"padding": {
					"description": "Set padding classes.",
					"type": "string"
				},
				"rounded": {
					"description": "Set rounded classes.",
					"type": "string"
				},
				"selected": {
					"description": "Enable the active selected state.",
					"type": "boolean"
				},
				"target": {
					"description": "Set the href target attribute.",
					"type": "string"
				},
				"title": {
					"description": "Provile a title attribute.",
					"type": "string"
				},
				"width": {
					"description": "Set width classes.",
					"type": "string"
				}
			},
			"propertyOrder": [
				"id",
				"href",
				"target",
				"label",
				"labelExpanded",
				"title",
				"selected",
				"base",
				"width",
				"aspect",
				"background",
				"hover",
				"active",
				"padding",
				"gap",
				"rounded",
				"classes",
				"expandedPadding",
				"expandedGap",
				"expandedClasses",
				"labelBase",
				"labelClasses",
				"labelExpandedBase",
				"labelExpandedClasses",
				"onClick",
				"children"
			],
			"type": "object"
		},
		"React.ReactElement<any,string|React.JSXElementConstructor<any>>": {
			"description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
			"properties": {
				"key": {
					"type": "string"
				},
				"props": {
					"description": "The type of the props object"
				},
				"type": {
					"anyOf": [
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"type": "string"
						}
					],
					"description": "The type of the component or tag"
				}
			},
			"propertyOrder": ["type", "props", "key"],
			"required": ["key", "props", "type"],
			"type": "object"
		},
		"React.ReactNode": {
			"anyOf": [
				{
					"$ref": "#/definitions/React.ReactElement<any,string|React.JSXElementConstructor<any>>"
				},
				{
					"$ref": "#/definitions/Iterable<React.ReactNode>"
				},
				{
					"$ref": "#/definitions/React.ReactPortal"
				},
				{
					"type": ["string", "number", "boolean"]
				}
			],
			"description": "Represents all of the things React can render.\n\nWhere {@link ReactElement} only represents JSX, `ReactNode` represents everything that can be rendered."
		},
		"React.ReactPortal": {
			"properties": {
				"children": {
					"$ref": "#/definitions/React.ReactNode"
				},
				"key": {
					"type": "string"
				},
				"props": {
					"description": "The type of the props object"
				},
				"type": {
					"anyOf": [
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"type": "string"
						}
					],
					"description": "The type of the component or tag"
				}
			},
			"propertyOrder": ["children", "type", "props", "key"],
			"required": ["children", "key", "props", "type"],
			"type": "object"
		}
	}
}
