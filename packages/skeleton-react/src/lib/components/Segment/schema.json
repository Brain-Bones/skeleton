{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"definitions": {
		"Iterable<React.ReactNode>": {
			"propertyOrder": ["__@iterator@83"],
			"type": "object"
		},
		"React.ReactElement<any,string|React.JSXElementConstructor<any>>": {
			"description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
			"properties": {
				"key": {
					"type": "string"
				},
				"props": {
					"description": "The type of the props object"
				},
				"type": {
					"anyOf": [
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"type": "string"
						}
					],
					"description": "The type of the component or tag"
				}
			},
			"propertyOrder": ["type", "props", "key"],
			"required": ["key", "props", "type"],
			"type": "object"
		},
		"React.ReactNode": {
			"anyOf": [
				{
					"$ref": "#/definitions/React.ReactElement<any,string|React.JSXElementConstructor<any>>"
				},
				{
					"$ref": "#/definitions/Iterable<React.ReactNode>"
				},
				{
					"$ref": "#/definitions/React.ReactPortal"
				},
				{
					"type": ["string", "number", "boolean"]
				}
			],
			"description": "Represents all of the things React can render.\n\nWhere {@link ReactElement} only represents JSX, `ReactNode` represents everything that can be rendered."
		},
		"React.ReactPortal": {
			"properties": {
				"children": {
					"$ref": "#/definitions/React.ReactNode"
				},
				"key": {
					"type": "string"
				},
				"props": {
					"description": "The type of the props object"
				},
				"type": {
					"anyOf": [
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"type": "string"
						}
					],
					"description": "The type of the component or tag"
				}
			},
			"propertyOrder": ["children", "type", "props", "key"],
			"required": ["children", "key", "props", "type"],
			"type": "object"
		},
		"SegmentContextState": {
			"properties": {
				"name": {
					"type": "string"
				},
				"onSelectionHandler": {
					"propertyOrder": [],
					"type": "object"
				},
				"value": {
					"type": "string"
				}
			},
			"propertyOrder": ["value", "name", "onSelectionHandler"],
			"required": ["name", "onSelectionHandler", "value"],
			"type": "object"
		},
		"SegmentItemsProps": {
			"properties": {
				"active": {
					"description": "Sets active state classes.",
					"type": "string"
				},
				"base": {
					"description": "Sets base classes.",
					"type": "string"
				},
				"children": {
					"$ref": "#/definitions/React.ReactNode"
				},
				"classes": {
					"description": "Provide arbitrary CSS classes.",
					"type": "string"
				},
				"disabled": {
					"description": "Set the disabled state.",
					"type": "boolean"
				},
				"hover": {
					"description": "Sets hover state classes.",
					"type": "string"
				},
				"id": {
					"description": "Provide a unique ID.",
					"type": "string"
				},
				"labelBase": {
					"description": "Sets base classes for the label element.",
					"type": "string"
				},
				"labelClasses": {
					"description": "Provide arbitrary CSS classes for the label element.",
					"type": "string"
				},
				"onClick": {
					"description": "Triggers on items click event.",
					"propertyOrder": [],
					"type": "object"
				},
				"title": {
					"description": "Provide a hover title attribute.",
					"type": "string"
				},
				"value": {
					"description": "Provide the unique segment value.",
					"type": "string"
				}
			},
			"propertyOrder": [
				"id",
				"value",
				"title",
				"disabled",
				"base",
				"active",
				"hover",
				"classes",
				"labelBase",
				"labelClasses",
				"onClick",
				"children"
			],
			"required": ["id", "value"],
			"type": "object"
		},
		"SegmentProps": {
			"properties": {
				"background": {
					"description": "Set background classes.",
					"type": "string"
				},
				"base": {
					"description": "Sets base classes.",
					"type": "string"
				},
				"border": {
					"description": "Set border classes.",
					"type": "string"
				},
				"children": {
					"$ref": "#/definitions/React.ReactNode"
				},
				"classes": {
					"description": "Provide arbitrary CSS classes.",
					"type": "string"
				},
				"flexDirection": {
					"description": "Set flex direction classes.",
					"type": "string"
				},
				"gap": {
					"description": "Set gap classes.",
					"type": "string"
				},
				"name": {
					"description": "Provide the shared input name.",
					"type": "string"
				},
				"onChange": {
					"description": "Triggers when the value state is changed.",
					"propertyOrder": [],
					"type": "object"
				},
				"padding": {
					"description": "Set padding classes.",
					"type": "string"
				},
				"rounded": {
					"description": "Set rounded classes.",
					"type": "string"
				},
				"value": {
					"description": "Set the group value, which determines selection state.",
					"type": "string"
				},
				"width": {
					"description": "Set width classes.",
					"type": "string"
				}
			},
			"propertyOrder": [
				"value",
				"name",
				"base",
				"background",
				"border",
				"flexDirection",
				"gap",
				"padding",
				"rounded",
				"width",
				"classes",
				"onChange",
				"children"
			],
			"required": ["name"],
			"type": "object"
		}
	}
}
