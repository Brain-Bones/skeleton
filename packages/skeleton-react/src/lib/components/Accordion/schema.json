{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"definitions": {
		"AccordionContextState": {
			"properties": {
				"animDuration": {
					"type": "number"
				},
				"api": {
					"$ref": "#/definitions/Api<PropTypes>"
				},
				"iconClosed": {
					"$ref": "#/definitions/React.ReactNode"
				},
				"iconOpen": {
					"$ref": "#/definitions/React.ReactNode"
				}
			},
			"propertyOrder": ["animDuration", "iconOpen", "iconClosed", "api"],
			"required": ["animDuration", "api", "iconClosed", "iconOpen"],
			"type": "object"
		},
		"AccordionControlProps": {
			"properties": {
				"base": {
					"description": "Sets control's base styles.",
					"type": "string"
				},
				"children": {
					"$ref": "#/definitions/React.ReactNode"
				},
				"classes": {
					"description": "Provide arbitrary CSS classes to the control.",
					"type": "string"
				},
				"contentBase": {
					"description": "Sets the lead's base styles",
					"type": "string"
				},
				"contentClasses": {
					"description": "Provide arbitrary CSS classes to the content.",
					"type": "string"
				},
				"disabled": {
					"description": "Set a disabled state for the item.",
					"type": "boolean"
				},
				"headingElement": {
					"description": "The heading element.",
					"enum": [
						"a",
						"abbr",
						"address",
						"animate",
						"animateMotion",
						"animateTransform",
						"area",
						"article",
						"aside",
						"audio",
						"b",
						"base",
						"bdi",
						"bdo",
						"big",
						"blockquote",
						"body",
						"br",
						"button",
						"canvas",
						"caption",
						"center",
						"circle",
						"cite",
						"clipPath",
						"code",
						"col",
						"colgroup",
						"data",
						"datalist",
						"dd",
						"defs",
						"del",
						"desc",
						"details",
						"dfn",
						"dialog",
						"div",
						"dl",
						"dt",
						"ellipse",
						"em",
						"embed",
						"feBlend",
						"feColorMatrix",
						"feComponentTransfer",
						"feComposite",
						"feConvolveMatrix",
						"feDiffuseLighting",
						"feDisplacementMap",
						"feDistantLight",
						"feDropShadow",
						"feFlood",
						"feFuncA",
						"feFuncB",
						"feFuncG",
						"feFuncR",
						"feGaussianBlur",
						"feImage",
						"feMerge",
						"feMergeNode",
						"feMorphology",
						"feOffset",
						"fePointLight",
						"feSpecularLighting",
						"feSpotLight",
						"feTile",
						"feTurbulence",
						"fieldset",
						"figcaption",
						"figure",
						"filter",
						"footer",
						"foreignObject",
						"form",
						"g",
						"h1",
						"h2",
						"h3",
						"h4",
						"h5",
						"h6",
						"head",
						"header",
						"hgroup",
						"hr",
						"html",
						"i",
						"iframe",
						"image",
						"img",
						"input",
						"ins",
						"kbd",
						"keygen",
						"label",
						"legend",
						"li",
						"line",
						"linearGradient",
						"link",
						"main",
						"map",
						"mark",
						"marker",
						"mask",
						"menu",
						"menuitem",
						"meta",
						"metadata",
						"meter",
						"mpath",
						"nav",
						"noindex",
						"noscript",
						"object",
						"ol",
						"optgroup",
						"option",
						"output",
						"p",
						"param",
						"path",
						"pattern",
						"picture",
						"polygon",
						"polyline",
						"pre",
						"progress",
						"q",
						"radialGradient",
						"rect",
						"rp",
						"rt",
						"ruby",
						"s",
						"samp",
						"script",
						"search",
						"section",
						"select",
						"set",
						"slot",
						"small",
						"source",
						"span",
						"stop",
						"strong",
						"style",
						"sub",
						"summary",
						"sup",
						"svg",
						"switch",
						"symbol",
						"table",
						"tbody",
						"td",
						"template",
						"text",
						"textPath",
						"textarea",
						"tfoot",
						"th",
						"thead",
						"time",
						"title",
						"tr",
						"track",
						"tspan",
						"u",
						"ul",
						"use",
						"var",
						"video",
						"view",
						"wbr",
						"webview"
					],
					"type": "string"
				},
				"hover": {
					"description": "Sets control's the hover styles.",
					"type": "string"
				},
				"indicatorBase": {
					"description": "Sets the lead's base styles",
					"type": "string"
				},
				"indicatorClasses": {
					"description": "Provide arbitrary CSS classes to the indicator.",
					"type": "string"
				},
				"lead": {
					"$ref": "#/definitions/React.ReactNode",
					"description": "The lead child slot for the control."
				},
				"leadBase": {
					"description": "Sets the lead's base styles",
					"type": "string"
				},
				"leadClasses": {
					"description": "Provide arbitrary CSS classes to the lead.",
					"type": "string"
				},
				"padding": {
					"description": "Sets control's the padding styles.",
					"type": "string"
				},
				"rounded": {
					"description": "Sets control's the border radius styles.",
					"type": "string"
				}
			},
			"propertyOrder": [
				"headingElement",
				"disabled",
				"base",
				"hover",
				"padding",
				"rounded",
				"classes",
				"leadBase",
				"leadClasses",
				"contentBase",
				"contentClasses",
				"indicatorBase",
				"indicatorClasses",
				"lead",
				"children"
			],
			"type": "object"
		},
		"AccordionItemContextState": {
			"properties": {
				"id": {
					"type": "string"
				},
				"onClick": {
					"propertyOrder": [],
					"type": "object"
				}
			},
			"propertyOrder": ["id", "onClick"],
			"required": ["id", "onClick"],
			"type": "object"
		},
		"AccordionItemProps": {
			"properties": {
				"base": {
					"description": "Sets base styles.",
					"type": "string"
				},
				"children": {
					"$ref": "#/definitions/React.ReactNode"
				},
				"classes": {
					"description": "Provide arbitrary CSS classes.",
					"type": "string"
				},
				"disabled": {
					"description": "Whether the accordion item is disabled.",
					"type": "boolean"
				},
				"spaceY": {
					"description": "Set vertical spacing styles.",
					"type": "string"
				},
				"value": {
					"description": "The value of the accordion item.",
					"type": "string"
				}
			},
			"propertyOrder": ["base", "spaceY", "classes", "children", "value", "disabled"],
			"required": ["value"],
			"type": "object"
		},
		"AccordionPanelProps": {
			"properties": {
				"base": {
					"description": "Set the panel's base styles.",
					"type": "string"
				},
				"children": {
					"$ref": "#/definitions/React.ReactNode"
				},
				"classes": {
					"description": "Provide arbitrary CSS classes to the panel.",
					"type": "string"
				},
				"padding": {
					"description": "Set the panel's padding styles.",
					"type": "string"
				},
				"rounded": {
					"description": "Set the panel's border-radius styles.",
					"type": "string"
				}
			},
			"propertyOrder": ["base", "padding", "rounded", "classes", "children"],
			"type": "object"
		},
		"AccordionProps": {
			"properties": {
				"animDuration": {
					"description": "The slide animation duration in milliseconds.",
					"type": "number"
				},
				"base": {
					"description": "Sets base styles.",
					"type": "string"
				},
				"children": {
					"$ref": "#/definitions/React.ReactNode"
				},
				"classes": {
					"description": "Provide arbitrary CSS classes.",
					"type": "string"
				},
				"collapsible": {
					"default": false,
					"description": "Whether an accordion item can be closed after it has been expanded.",
					"type": "boolean"
				},
				"dir": {
					"default": "ltr",
					"description": "The document's text/writing direction.",
					"enum": ["ltr", "rtl"],
					"type": "string"
				},
				"disabled": {
					"description": "Whether the accordion items are disabled",
					"type": "boolean"
				},
				"getRootNode": {
					"description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron.",
					"propertyOrder": [],
					"type": "object"
				},
				"iconClosed": {
					"$ref": "#/definitions/React.ReactNode",
					"description": "Set the closed state icon."
				},
				"iconOpen": {
					"$ref": "#/definitions/React.ReactNode",
					"description": "Set the open state icon."
				},
				"ids": {
					"$ref": "#/definitions/Partial<{root:string;item(value:string):string;itemContent(value:string):string;itemTrigger(value:string):string;}>",
					"description": "The ids of the elements in the accordion. Useful for composition."
				},
				"multiple": {
					"default": false,
					"description": "Whether multple accordion items can be expanded at the same time.",
					"type": "boolean"
				},
				"onFocusChange": {
					"description": "The callback fired when the focused accordion item changes.",
					"propertyOrder": [],
					"type": "object"
				},
				"onValueChange": {
					"description": "Set the opened state.",
					"propertyOrder": [],
					"type": "object"
				},
				"padding": {
					"description": "Set padding styles.",
					"type": "string"
				},
				"rounded": {
					"description": "Set border radius styles.",
					"type": "string"
				},
				"spaceY": {
					"description": "Set vertical spacing styles.",
					"type": "string"
				},
				"value": {
					"description": "The `value` of the accordion items that are currently being expanded.",
					"items": {
						"type": "string"
					},
					"type": "array"
				},
				"width": {
					"description": "Set the width styles.",
					"type": "string"
				}
			},
			"propertyOrder": [
				"animDuration",
				"iconOpen",
				"iconClosed",
				"onValueChange",
				"base",
				"padding",
				"spaceY",
				"rounded",
				"width",
				"classes",
				"children",
				"value",
				"dir",
				"getRootNode",
				"disabled",
				"multiple",
				"ids",
				"collapsible",
				"onFocusChange"
			],
			"type": "object"
		},
		"Api<PropTypes>": {
			"properties": {
				"focusedValue": {
					"description": "The value of the focused accordion item.",
					"type": "string"
				},
				"setValue": {
					"description": "Sets the value of the accordion.",
					"propertyOrder": [],
					"type": "object"
				},
				"value": {
					"description": "The value of the accordion",
					"items": {
						"type": "string"
					},
					"type": "array"
				}
			},
			"propertyOrder": [
				"focusedValue",
				"value",
				"setValue",
				"getItemState",
				"getRootProps",
				"getItemProps",
				"getItemContentProps",
				"getItemTriggerProps",
				"getItemIndicatorProps"
			],
			"required": ["focusedValue", "setValue", "value"],
			"type": "object"
		},
		"Iterable<React.ReactNode>": {
			"propertyOrder": ["__@iterator@83"],
			"type": "object"
		},
		"Partial<{root:string;item(value:string):string;itemContent(value:string):string;itemTrigger(value:string):string;}>": {
			"properties": {
				"item": {
					"propertyOrder": [],
					"type": "object"
				},
				"itemContent": {
					"propertyOrder": [],
					"type": "object"
				},
				"itemTrigger": {
					"propertyOrder": [],
					"type": "object"
				},
				"root": {
					"type": "string"
				}
			},
			"propertyOrder": ["root", "item", "itemContent", "itemTrigger"],
			"type": "object"
		},
		"React.ReactElement<any,string|React.JSXElementConstructor<any>>": {
			"description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
			"properties": {
				"key": {
					"type": "string"
				},
				"props": {
					"description": "The type of the props object"
				},
				"type": {
					"anyOf": [
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"type": "string"
						}
					],
					"description": "The type of the component or tag"
				}
			},
			"propertyOrder": ["type", "props", "key"],
			"required": ["key", "props", "type"],
			"type": "object"
		},
		"React.ReactNode": {
			"anyOf": [
				{
					"$ref": "#/definitions/React.ReactElement<any,string|React.JSXElementConstructor<any>>"
				},
				{
					"$ref": "#/definitions/Iterable<React.ReactNode>"
				},
				{
					"$ref": "#/definitions/React.ReactPortal"
				},
				{
					"type": ["string", "number", "boolean"]
				}
			],
			"description": "Represents all of the things React can render.\n\nWhere {@link ReactElement} only represents JSX, `ReactNode` represents everything that can be rendered."
		},
		"React.ReactPortal": {
			"properties": {
				"children": {
					"$ref": "#/definitions/React.ReactNode"
				},
				"key": {
					"type": "string"
				},
				"props": {
					"description": "The type of the props object"
				},
				"type": {
					"anyOf": [
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"type": "string"
						}
					],
					"description": "The type of the component or tag"
				}
			},
			"propertyOrder": ["children", "type", "props", "key"],
			"required": ["children", "key", "props", "type"],
			"type": "object"
		}
	}
}
