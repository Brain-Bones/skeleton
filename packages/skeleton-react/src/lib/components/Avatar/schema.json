{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "AvatarProps": {
      "properties": {
        "alt": {
          "description": "Set avatar image Alt text.",
          "type": "string"
        },
        "background": {
          "description": "Set background styles.",
          "type": "string"
        },
        "base": {
          "description": "Set base styles.",
          "type": "string"
        },
        "border": {
          "description": "Set border styles.",
          "type": "string"
        },
        "children": {
          "$ref": "#/definitions/React.ReactNode"
        },
        "classes": {
          "description": "Provide arbitrary CSS classes.",
          "type": "string"
        },
        "filter": {
          "description": "Set avatar image filter name. such as \"#Apollo\".",
          "type": "string"
        },
        "font": {
          "description": "Set font styles.",
          "type": "string"
        },
        "imageBase": {
          "description": "Set avatar image base styles.",
          "type": "string"
        },
        "imageClasses": {
          "description": "Provide avatar image arbitrary CSS classes.",
          "type": "string"
        },
        "rounded": {
          "description": "Set border radius styles.",
          "type": "string"
        },
        "shadow": {
          "description": "Set shadow styles.",
          "type": "string"
        },
        "size": {
          "description": "Set size styles.",
          "type": "string"
        },
        "src": {
          "description": "Set avatar image source URL.",
          "type": "string"
        }
      },
      "propertyOrder": [
        "src",
        "alt",
        "filter",
        "base",
        "background",
        "size",
        "font",
        "border",
        "rounded",
        "shadow",
        "classes",
        "imageBase",
        "imageClasses",
        "children"
      ],
      "type": "object"
    },
    "Iterable<React.ReactNode>": {
      "propertyOrder": ["__@iterator@83"],
      "type": "object"
    },
    "React.ReactElement<any,string|React.JSXElementConstructor<any>>": {
      "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
      "properties": {
        "key": {
          "type": "string"
        },
        "props": {
          "description": "The type of the props object"
        },
        "type": {
          "anyOf": [
            {
              "propertyOrder": [],
              "type": "object"
            },
            {
              "propertyOrder": [],
              "type": "object"
            },
            {
              "type": "string"
            }
          ],
          "description": "The type of the component or tag"
        }
      },
      "propertyOrder": ["type", "props", "key"],
      "required": ["key", "props", "type"],
      "type": "object"
    },
    "React.ReactNode": {
      "anyOf": [
        {
          "$ref": "#/definitions/React.ReactElement<any,string|React.JSXElementConstructor<any>>"
        },
        {
          "$ref": "#/definitions/Iterable<React.ReactNode>"
        },
        {
          "$ref": "#/definitions/React.ReactPortal"
        },
        {
          "type": ["string", "number", "boolean"]
        }
      ],
      "description": "Represents all of the things React can render.\n\nWhere {@link ReactElement} only represents JSX, `ReactNode` represents everything that can be rendered."
    },
    "React.ReactPortal": {
      "properties": {
        "children": {
          "$ref": "#/definitions/React.ReactNode"
        },
        "key": {
          "type": "string"
        },
        "props": {
          "description": "The type of the props object"
        },
        "type": {
          "anyOf": [
            {
              "propertyOrder": [],
              "type": "object"
            },
            {
              "propertyOrder": [],
              "type": "object"
            },
            {
              "type": "string"
            }
          ],
          "description": "The type of the component or tag"
        }
      },
      "propertyOrder": ["children", "type", "props", "key"],
      "required": ["children", "key", "props", "type"],
      "type": "object"
    }
  }
}
