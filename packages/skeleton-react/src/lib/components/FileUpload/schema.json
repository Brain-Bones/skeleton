{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"definitions": {
		"AnyString": {
			"allOf": [
				{
					"properties": {},
					"type": "object"
				},
				{
					"type": "string"
				}
			]
		},
		"FileMimeType": {
			"anyOf": [
				{
					"$ref": "#/definitions/AnyString"
				},
				{
					"enum": [
						"application/json",
						"application/msword",
						"application/pdf",
						"application/rtf",
						"application/vnd.microsoft.portable-executable",
						"application/vnd.ms-excel",
						"application/vnd.ms-powerpoint",
						"application/vnd.openxmlformats-officedocument.presentationml.presentation",
						"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
						"application/vnd.openxmlformats-officedocument.wordprocessingml.document",
						"application/x-tar",
						"application/xml",
						"application/zip",
						"audio/*",
						"audio/aac",
						"audio/flac",
						"audio/mpeg",
						"audio/ogg",
						"audio/wav",
						"audio/webm",
						"audio/x-m4a",
						"font/eot",
						"font/otf",
						"font/ttf",
						"font/woff",
						"font/woff2",
						"image/*",
						"image/avif",
						"image/bmp",
						"image/gif",
						"image/heic",
						"image/jpeg",
						"image/png",
						"image/svg+xml",
						"image/webp",
						"text/*",
						"text/css",
						"text/csv",
						"text/html",
						"text/markdown",
						"text/plain",
						"video/*",
						"video/mp4",
						"video/ogg",
						"video/quicktime",
						"video/webm",
						"video/x-msvideo"
					],
					"type": "string"
				}
			]
		},
		"FileUploadProps": {
			"properties": {
				"accept": {
					"anyOf": [
						{
							"$ref": "#/definitions/Record<string,string[]>"
						},
						{
							"$ref": "#/definitions/AnyString"
						},
						{
							"items": {
								"$ref": "#/definitions/FileMimeType"
							},
							"type": "array"
						},
						{
							"enum": [
								"application/json",
								"application/msword",
								"application/pdf",
								"application/rtf",
								"application/vnd.microsoft.portable-executable",
								"application/vnd.ms-excel",
								"application/vnd.ms-powerpoint",
								"application/vnd.openxmlformats-officedocument.presentationml.presentation",
								"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
								"application/vnd.openxmlformats-officedocument.wordprocessingml.document",
								"application/x-tar",
								"application/xml",
								"application/zip",
								"audio/*",
								"audio/aac",
								"audio/flac",
								"audio/mpeg",
								"audio/ogg",
								"audio/wav",
								"audio/webm",
								"audio/x-m4a",
								"font/eot",
								"font/otf",
								"font/ttf",
								"font/woff",
								"font/woff2",
								"image/*",
								"image/avif",
								"image/bmp",
								"image/gif",
								"image/heic",
								"image/jpeg",
								"image/png",
								"image/svg+xml",
								"image/webp",
								"text/*",
								"text/css",
								"text/csv",
								"text/html",
								"text/markdown",
								"text/plain",
								"video/*",
								"video/mp4",
								"video/ogg",
								"video/quicktime",
								"video/webm",
								"video/x-msvideo"
							],
							"type": "string"
						}
					],
					"description": "The accept file types"
				},
				"allowDrop": {
					"default": true,
					"description": "Whether to allow drag and drop in the dropzone element",
					"type": "boolean"
				},
				"base": {
					"description": "Set root base classes",
					"type": "string"
				},
				"capture": {
					"description": "The default camera to use when capturing media",
					"enum": ["environment", "user"],
					"type": "string"
				},
				"children": {
					"$ref": "#/definitions/React.ReactNode"
				},
				"classes": {
					"description": "Set root arbitrary classes",
					"type": "string"
				},
				"dir": {
					"default": "ltr",
					"description": "The document's text/writing direction.",
					"enum": ["ltr", "rtl"],
					"type": "string"
				},
				"directory": {
					"description": "Whether to accept directories, only works in webkit browsers",
					"type": "boolean"
				},
				"disabled": {
					"description": "Whether the file input is disabled",
					"type": "boolean"
				},
				"fileBase": {
					"description": "Set file base classes",
					"type": "string"
				},
				"fileBg": {
					"description": "Set file background classes",
					"type": "string"
				},
				"fileButton": {
					"description": "Set file button classes",
					"type": "string"
				},
				"fileClasses": {
					"description": "Set file arbitrary classes",
					"type": "string"
				},
				"fileGap": {
					"description": "Set file gap classes",
					"type": "string"
				},
				"fileIcon": {
					"description": "Set file icon classes",
					"type": "string"
				},
				"fileName": {
					"description": "Set file name classes",
					"type": "string"
				},
				"filePadding": {
					"description": "Set file padding classes",
					"type": "string"
				},
				"fileRounded": {
					"description": "Set file border-radius classes",
					"type": "string"
				},
				"fileSize": {
					"description": "Set file size classes",
					"type": "string"
				},
				"filesListBase": {
					"description": "Set file list base classes",
					"type": "string"
				},
				"filesListClasses": {
					"description": "Set file list arbitrary classes",
					"type": "string"
				},
				"getRootNode": {
					"description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron.",
					"propertyOrder": [],
					"type": "object"
				},
				"iconFile": {
					"$ref": "#/definitions/React.ReactNode",
					"description": "Provide an icon proceeding each file."
				},
				"iconFileRemove": {
					"$ref": "#/definitions/React.ReactNode",
					"description": "Provide an icon for the remove file action."
				},
				"iconInterface": {
					"$ref": "#/definitions/React.ReactNode",
					"description": "Provide an icon for the interface."
				},
				"ids": {
					"$ref": "#/definitions/Partial<{root:string;dropzone:string;hiddenInput:string;trigger:string;label:string;item(id:string):string;itemName(id:string):string;itemSizeText(id:string):string;itemPreview(id:string):string;}>",
					"description": "The ids of the elements. Useful for composition."
				},
				"interfaceBase": {
					"description": "Set interface base classes",
					"type": "string"
				},
				"interfaceBg": {
					"description": "Set interface background classes",
					"type": "string"
				},
				"interfaceBorder": {
					"description": "Set interface border classes",
					"type": "string"
				},
				"interfaceBorderColor": {
					"description": "Set interface border color classes",
					"type": "string"
				},
				"interfaceClasses": {
					"description": "Set interface arbitrary classes",
					"type": "string"
				},
				"interfaceIcon": {
					"description": "Set interface icon classes",
					"type": "string"
				},
				"interfacePadding": {
					"description": "Set interface border classes",
					"type": "string"
				},
				"interfaceRounded": {
					"description": "Set interface border radius classes",
					"type": "string"
				},
				"interfaceSubtext": {
					"description": "Set interface subtext classes",
					"type": "string"
				},
				"interfaceText": {
					"description": "Set interface text classes",
					"type": "string"
				},
				"label": {
					"description": "Set the interface text value.",
					"type": "string"
				},
				"locale": {
					"default": "en-US",
					"description": "The current locale. Based on the BCP 47 definition.",
					"type": "string"
				},
				"maxFileSize": {
					"default": "Infinity",
					"description": "The maximum file size in bytes",
					"type": "number"
				},
				"maxFiles": {
					"default": 1,
					"description": "The maximum number of files",
					"type": "number"
				},
				"minFileSize": {
					"default": 0,
					"description": "The minimum file size in bytes",
					"type": "number"
				},
				"name": {
					"description": "The name of the underlying file input",
					"type": "string"
				},
				"onFileAccept": {
					"description": "Function called when the file is accepted",
					"propertyOrder": [],
					"type": "object"
				},
				"onFileChange": {
					"description": "Function called when the value changes, whether accepted or rejected",
					"propertyOrder": [],
					"type": "object"
				},
				"onFileReject": {
					"description": "Function called when the file is rejected",
					"propertyOrder": [],
					"type": "object"
				},
				"required": {
					"description": "Whether the file input is required",
					"type": "boolean"
				},
				"stateDisabled": {
					"description": "Set disabled state classes for the root.",
					"type": "string"
				},
				"stateDragging": {
					"description": "Set dragging state classes for the interface.",
					"type": "string"
				},
				"stateInvalid": {
					"description": "Set invalid state classes for the interface.",
					"type": "string"
				},
				"subtext": {
					"description": "Set the interface subtext value.",
					"type": "string"
				},
				"translations": {
					"$ref": "#/definitions/IntlTranslations",
					"description": "The localized messages to use."
				},
				"validate": {
					"description": "Function to validate a file",
					"propertyOrder": [],
					"type": "object"
				}
			},
			"propertyOrder": [
				"label",
				"subtext",
				"base",
				"classes",
				"interfaceBase",
				"interfaceBg",
				"interfaceBorder",
				"interfaceBorderColor",
				"interfacePadding",
				"interfaceRounded",
				"interfaceClasses",
				"interfaceIcon",
				"interfaceText",
				"interfaceSubtext",
				"filesListBase",
				"filesListClasses",
				"fileBase",
				"fileBg",
				"fileGap",
				"filePadding",
				"fileRounded",
				"fileClasses",
				"fileIcon",
				"fileName",
				"fileSize",
				"fileButton",
				"stateDisabled",
				"stateInvalid",
				"stateDragging",
				"iconInterface",
				"iconFile",
				"iconFileRemove",
				"children",
				"required",
				"name",
				"dir",
				"directory",
				"getRootNode",
				"disabled",
				"accept",
				"capture",
				"locale",
				"ids",
				"translations",
				"allowDrop",
				"maxFileSize",
				"minFileSize",
				"maxFiles",
				"validate",
				"onFileChange",
				"onFileAccept",
				"onFileReject"
			],
			"type": "object"
		},
		"IntlTranslations": {
			"propertyOrder": ["itemPreview", "deleteFile"],
			"type": "object"
		},
		"Iterable<React.ReactNode>": {
			"propertyOrder": ["__@iterator@83"],
			"type": "object"
		},
		"Partial<{root:string;dropzone:string;hiddenInput:string;trigger:string;label:string;item(id:string):string;itemName(id:string):string;itemSizeText(id:string):string;itemPreview(id:string):string;}>": {
			"properties": {
				"dropzone": {
					"type": "string"
				},
				"hiddenInput": {
					"type": "string"
				},
				"item": {
					"propertyOrder": [],
					"type": "object"
				},
				"itemName": {
					"propertyOrder": [],
					"type": "object"
				},
				"itemPreview": {
					"propertyOrder": [],
					"type": "object"
				},
				"itemSizeText": {
					"propertyOrder": [],
					"type": "object"
				},
				"label": {
					"type": "string"
				},
				"root": {
					"type": "string"
				},
				"trigger": {
					"type": "string"
				}
			},
			"propertyOrder": ["root", "dropzone", "hiddenInput", "trigger", "label", "item", "itemName", "itemSizeText", "itemPreview"],
			"type": "object"
		},
		"React.ReactElement<any,string|React.JSXElementConstructor<any>>": {
			"description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
			"properties": {
				"key": {
					"type": "string"
				},
				"props": {
					"description": "The type of the props object"
				},
				"type": {
					"anyOf": [
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"type": "string"
						}
					],
					"description": "The type of the component or tag"
				}
			},
			"propertyOrder": ["type", "props", "key"],
			"required": ["key", "props", "type"],
			"type": "object"
		},
		"React.ReactNode": {
			"anyOf": [
				{
					"$ref": "#/definitions/React.ReactElement<any,string|React.JSXElementConstructor<any>>"
				},
				{
					"$ref": "#/definitions/Iterable<React.ReactNode>"
				},
				{
					"$ref": "#/definitions/React.ReactPortal"
				},
				{
					"type": ["string", "number", "boolean"]
				}
			],
			"description": "Represents all of the things React can render.\n\nWhere {@link ReactElement} only represents JSX, `ReactNode` represents everything that can be rendered."
		},
		"React.ReactPortal": {
			"properties": {
				"children": {
					"$ref": "#/definitions/React.ReactNode"
				},
				"key": {
					"type": "string"
				},
				"props": {
					"description": "The type of the props object"
				},
				"type": {
					"anyOf": [
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"type": "string"
						}
					],
					"description": "The type of the component or tag"
				}
			},
			"propertyOrder": ["children", "type", "props", "key"],
			"required": ["children", "key", "props", "type"],
			"type": "object"
		},
		"Record<string,string[]>": {
			"propertyOrder": [],
			"type": "object"
		}
	}
}
