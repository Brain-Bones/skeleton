{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"definitions": {
		"Api<PropTypes>": {
			"properties": {
				"focusedValue": {
					"description": "The value of the tab that is currently focused.",
					"type": "string"
				},
				"value": {
					"description": "The current value of the tabs.",
					"type": "string"
				}
			},
			"propertyOrder": [
				"value",
				"focusedValue",
				"setValue",
				"clearValue",
				"setIndicatorRect",
				"syncTabIndex",
				"focus",
				"selectNext",
				"selectPrev",
				"getTriggerState",
				"getRootProps",
				"getListProps",
				"getTriggerProps",
				"getContentProps",
				"getIndicatorProps"
			],
			"required": ["focusedValue", "value"],
			"type": "object"
		},
		"IntlTranslations": {
			"properties": {
				"listLabel": {
					"type": "string"
				}
			},
			"propertyOrder": ["listLabel"],
			"type": "object"
		},
		"Iterable<React.ReactNode>": {
			"propertyOrder": ["__@iterator@83"],
			"type": "object"
		},
		"Partial<{root:string;trigger:string;list:string;content:string;indicator:string;}>": {
			"properties": {
				"content": {
					"type": "string"
				},
				"indicator": {
					"type": "string"
				},
				"list": {
					"type": "string"
				},
				"root": {
					"type": "string"
				},
				"trigger": {
					"type": "string"
				}
			},
			"propertyOrder": ["root", "trigger", "list", "content", "indicator"],
			"type": "object"
		},
		"React.ReactElement<any,string|React.JSXElementConstructor<any>>": {
			"description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
			"properties": {
				"key": {
					"type": "string"
				},
				"props": {
					"description": "The type of the props object"
				},
				"type": {
					"anyOf": [
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"type": "string"
						}
					],
					"description": "The type of the component or tag"
				}
			},
			"propertyOrder": ["type", "props", "key"],
			"required": ["key", "props", "type"],
			"type": "object"
		},
		"React.ReactNode": {
			"anyOf": [
				{
					"$ref": "#/definitions/React.ReactElement<any,string|React.JSXElementConstructor<any>>"
				},
				{
					"$ref": "#/definitions/Iterable<React.ReactNode>"
				},
				{
					"$ref": "#/definitions/React.ReactPortal"
				},
				{
					"type": ["string", "number", "boolean"]
				}
			],
			"description": "Represents all of the things React can render.\n\nWhere {@link ReactElement} only represents JSX, `ReactNode` represents everything that can be rendered."
		},
		"React.ReactPortal": {
			"properties": {
				"children": {
					"$ref": "#/definitions/React.ReactNode"
				},
				"key": {
					"type": "string"
				},
				"props": {
					"description": "The type of the props object"
				},
				"type": {
					"anyOf": [
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"type": "string"
						}
					],
					"description": "The type of the component or tag"
				}
			},
			"propertyOrder": ["children", "type", "props", "key"],
			"required": ["children", "key", "props", "type"],
			"type": "object"
		},
		"TabsContentProps": {
			"properties": {
				"base": {
					"description": "Set base classes for the panel group element.",
					"type": "string"
				},
				"children": {
					"$ref": "#/definitions/React.ReactNode"
				},
				"classes": {
					"description": "Provide arbitrary classes for the panel group element.",
					"type": "string"
				}
			},
			"propertyOrder": ["base", "classes", "children"],
			"type": "object"
		},
		"TabsContextState": {
			"properties": {
				"api": {
					"$ref": "#/definitions/Api<PropTypes>"
				},
				"fluid": {
					"type": "boolean"
				}
			},
			"propertyOrder": ["fluid", "api"],
			"required": ["api", "fluid"],
			"type": "object"
		},
		"TabsControlProps": {
			"properties": {
				"base": {
					"description": "Set base classes for the control element.",
					"type": "string"
				},
				"children": {
					"$ref": "#/definitions/React.ReactNode"
				},
				"classes": {
					"description": "Provide arbitrary classes for the control element.",
					"type": "string"
				},
				"disabled": {
					"description": "Whether the tab is disabled",
					"type": "boolean"
				},
				"labelBase": {
					"description": "Set base classes for the label element.",
					"type": "string"
				},
				"labelClasses": {
					"description": "Provide arbitrary classes for the label element.",
					"type": "string"
				},
				"lead": {
					"$ref": "#/definitions/React.ReactNode",
					"description": "The lead node for the control element."
				},
				"padding": {
					"description": "Set padding classes for the control element.",
					"type": "string"
				},
				"stateActive": {
					"description": "Set active classes for the control element.",
					"type": "string"
				},
				"stateInactive": {
					"description": "Set inactive classes for the control element.",
					"type": "string"
				},
				"stateLabelActive": {
					"description": "Set active classes for the label element.",
					"type": "string"
				},
				"stateLabelInactive": {
					"description": "Set inactive classes for the label element.",
					"type": "string"
				},
				"translateX": {
					"description": "Set x-axis translate classes for the control element.",
					"type": "string"
				},
				"value": {
					"description": "The value of the tab",
					"type": "string"
				}
			},
			"propertyOrder": [
				"base",
				"padding",
				"translateX",
				"classes",
				"labelBase",
				"labelClasses",
				"stateInactive",
				"stateActive",
				"stateLabelInactive",
				"stateLabelActive",
				"lead",
				"children",
				"value",
				"disabled"
			],
			"required": ["value"],
			"type": "object"
		},
		"TabsListProps": {
			"properties": {
				"base": {
					"description": "Set base classes for the list element.",
					"type": "string"
				},
				"border": {
					"description": "Set border classes for the list element.",
					"type": "string"
				},
				"children": {
					"$ref": "#/definitions/React.ReactNode"
				},
				"classes": {
					"description": "Provide arbitrary classes for the list element.",
					"type": "string"
				},
				"gap": {
					"description": "Set gap classes for the list element.",
					"type": "string"
				},
				"justify": {
					"description": "Set justify classes for the list element.",
					"type": "string"
				},
				"margin": {
					"description": "Set margin classes for the list element.",
					"type": "string"
				}
			},
			"propertyOrder": ["base", "justify", "border", "margin", "gap", "classes", "children"],
			"type": "object"
		},
		"TabsPanelProps": {
			"properties": {
				"base": {
					"description": "Set base classes for the panel element.",
					"type": "string"
				},
				"children": {
					"$ref": "#/definitions/React.ReactNode"
				},
				"classes": {
					"description": "Provide arbitrary classes for the panel element.",
					"type": "string"
				},
				"value": {
					"description": "The value of the tab",
					"type": "string"
				}
			},
			"propertyOrder": ["base", "classes", "children", "value"],
			"required": ["value"],
			"type": "object"
		},
		"TabsRootProps": {
			"properties": {
				"activationMode": {
					"default": "automatic",
					"description": "The activation mode of the tabs. Can be `manual` or `automatic`\n- `manual`: Tabs are activated when clicked or press `enter` key.\n- `automatic`: Tabs are activated when receiving focus",
					"enum": ["automatic", "manual"],
					"type": "string"
				},
				"base": {
					"description": "Set base classes for the root element.",
					"type": "string"
				},
				"children": {
					"$ref": "#/definitions/React.ReactNode"
				},
				"classes": {
					"description": "Provide arbitrary classes for the root element.",
					"type": "string"
				},
				"composite": {
					"description": "Whether the tab is composite",
					"type": "boolean"
				},
				"dir": {
					"default": "ltr",
					"description": "The document's text/writing direction.",
					"enum": ["ltr", "rtl"],
					"type": "string"
				},
				"fluid": {
					"type": "boolean"
				},
				"getRootNode": {
					"description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron.",
					"propertyOrder": [],
					"type": "object"
				},
				"ids": {
					"$ref": "#/definitions/Partial<{root:string;trigger:string;list:string;content:string;indicator:string;}>",
					"description": "The ids of the elements in the tabs. Useful for composition."
				},
				"loopFocus": {
					"default": true,
					"description": "Whether the keyboard navigation will loop from last tab to first, and vice versa.",
					"type": "boolean"
				},
				"onFocusChange": {
					"description": "Callback to be called when the focused tab changes",
					"propertyOrder": [],
					"type": "object"
				},
				"onValueChange": {
					"description": "Triggers when the value state is changed.",
					"propertyOrder": [],
					"type": "object"
				},
				"translations": {
					"$ref": "#/definitions/IntlTranslations",
					"description": "Specifies the localized strings that identifies the accessibility elements and their states"
				},
				"value": {
					"description": "The selected tab id",
					"type": "string"
				}
			},
			"propertyOrder": [
				"fluid",
				"base",
				"classes",
				"onValueChange",
				"children",
				"composite",
				"value",
				"dir",
				"getRootNode",
				"ids",
				"translations",
				"loopFocus",
				"activationMode",
				"onFocusChange"
			],
			"type": "object"
		}
	}
}
