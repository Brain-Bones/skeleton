{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"definitions": {
		"Iterable<React.ReactNode>": {
			"propertyOrder": ["__@iterator@83"],
			"type": "object"
		},
		"React.ReactElement<any,string|React.JSXElementConstructor<any>>": {
			"description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
			"properties": {
				"key": {
					"type": "string"
				},
				"props": {
					"description": "The type of the props object"
				},
				"type": {
					"anyOf": [
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"type": "string"
						}
					],
					"description": "The type of the component or tag"
				}
			},
			"propertyOrder": ["type", "props", "key"],
			"required": ["key", "props", "type"],
			"type": "object"
		},
		"React.ReactNode": {
			"anyOf": [
				{
					"$ref": "#/definitions/React.ReactElement<any,string|React.JSXElementConstructor<any>>"
				},
				{
					"$ref": "#/definitions/Iterable<React.ReactNode>"
				},
				{
					"$ref": "#/definitions/React.ReactPortal"
				},
				{
					"type": ["string", "number", "boolean"]
				}
			],
			"description": "Represents all of the things React can render.\n\nWhere {@link ReactElement} only represents JSX, `ReactNode` represents everything that can be rendered."
		},
		"React.ReactPortal": {
			"properties": {
				"children": {
					"$ref": "#/definitions/React.ReactNode"
				},
				"key": {
					"type": "string"
				},
				"props": {
					"description": "The type of the props object"
				},
				"type": {
					"anyOf": [
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"propertyOrder": [],
							"type": "object"
						},
						{
							"type": "string"
						}
					],
					"description": "The type of the component or tag"
				}
			},
			"propertyOrder": ["children", "type", "props", "key"],
			"required": ["children", "key", "props", "type"],
			"type": "object"
		},
		"SwitchProps": {
			"properties": {
				"activeChild": {
					"$ref": "#/definitions/React.ReactNode",
					"description": "The active state children."
				},
				"base": {
					"description": "Set base classes for the root element.",
					"type": "string"
				},
				"checked": {
					"description": "Set the checked state.",
					"type": "boolean"
				},
				"children": {
					"$ref": "#/definitions/React.ReactNode"
				},
				"classes": {
					"description": "Provide arbitrary classes to the root element.",
					"type": "string"
				},
				"compact": {
					"description": "Set the compact display mode.",
					"type": "boolean"
				},
				"controlActive": {
					"description": "Set active state classes for the control element.",
					"type": "string"
				},
				"controlBase": {
					"description": "Set base classes for the control element.",
					"type": "string"
				},
				"controlClasses": {
					"description": "Provide arbitrary classes to the control element.",
					"type": "string"
				},
				"controlDisabled": {
					"description": "Set disabled state classes for the control element.",
					"type": "string"
				},
				"controlHeight": {
					"description": "Set height classes for the control element.",
					"type": "string"
				},
				"controlHover": {
					"description": "Set hover classes for the control element.",
					"type": "string"
				},
				"controlInactive": {
					"description": "Set inactive state classes for the control element.",
					"type": "string"
				},
				"controlPadding": {
					"description": "Set padding classes for the control element.",
					"type": "string"
				},
				"controlRounded": {
					"description": "Set rounded classes for the control element.",
					"type": "string"
				},
				"controlWidth": {
					"description": "Set width classes for the control element.",
					"type": "string"
				},
				"disabled": {
					"description": "Set the disabled state.",
					"type": "boolean"
				},
				"iconActiveBase": {
					"description": "Set base classes for the active icon child.",
					"type": "string"
				},
				"iconInactiveBase": {
					"description": "Set base classes for the inactive icon child.",
					"type": "string"
				},
				"inactiveChild": {
					"$ref": "#/definitions/React.ReactNode",
					"description": "The inactive state children."
				},
				"labelBase": {
					"description": "Set base classes for the label element.",
					"type": "string"
				},
				"labelClasses": {
					"description": "Provide arbitrary classes to the label element.",
					"type": "string"
				},
				"name": {
					"description": "Set a unique name for the switch input.",
					"type": "string"
				},
				"onChange": {
					"description": "Triggers when the switch is toggled.",
					"propertyOrder": [],
					"type": "object"
				},
				"thumbActive": {
					"description": "Set active classes for the thumb element.",
					"type": "string"
				},
				"thumbBase": {
					"description": "Set base classes for the thumb element.",
					"type": "string"
				},
				"thumbClasses": {
					"description": "Provide arbitrary classes to the thumb element.",
					"type": "string"
				},
				"thumbDuration": {
					"description": "Set animation duration classes for the thumb element.",
					"type": "string"
				},
				"thumbEase": {
					"description": "Set animation easing classes for the thumb element.",
					"type": "string"
				},
				"thumbInactive": {
					"description": "Set inactive classes for the thumb element.",
					"type": "string"
				},
				"thumbRounded": {
					"description": "Set rounded classes for the thumb element.",
					"type": "string"
				},
				"thumbTransition": {
					"description": "Set animation transition classes for the thumb element.",
					"type": "string"
				},
				"thumbTranslateX": {
					"description": "Set animation X-axis translate classes for the thumb element.",
					"type": "string"
				}
			},
			"propertyOrder": [
				"name",
				"checked",
				"disabled",
				"compact",
				"base",
				"classes",
				"controlBase",
				"controlInactive",
				"controlActive",
				"controlDisabled",
				"controlWidth",
				"controlHeight",
				"controlPadding",
				"controlRounded",
				"controlHover",
				"controlClasses",
				"thumbBase",
				"thumbInactive",
				"thumbActive",
				"thumbRounded",
				"thumbTranslateX",
				"thumbTransition",
				"thumbEase",
				"thumbDuration",
				"thumbClasses",
				"labelBase",
				"labelClasses",
				"iconInactiveBase",
				"iconActiveBase",
				"onChange",
				"inactiveChild",
				"activeChild",
				"children"
			],
			"required": ["name"],
			"type": "object"
		}
	}
}
